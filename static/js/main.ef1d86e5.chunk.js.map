{"version":3,"sources":["App.js","index.js"],"names":["App","state","contacts","filter","name","number","inputId","nanoid","handleChange","e","target","value","setState","submitForm","preventDefault","newContact","id","prevState","deleteContact","idBtn","contact","onSubmit","this","type","onChange","pattern","title","required","toLowerCase","includes","map","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAGMA,E,4MACJC,MAAQ,CACNC,SAAU,GACVC,OAAQ,GACRC,KAAM,GACNC,OAAQ,I,EAGVC,QAAUC,c,EAEVC,aAAe,SAAAC,GACb,MAAwBA,EAAEC,OAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBR,EAAOO,K,EAG1BE,WAAa,SAAAJ,GACXA,EAAEK,iBACF,MAAyB,EAAKb,MAAtBG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACRU,EAAa,CACjBC,GAAIT,cACJH,OACAC,UAEF,EAAKO,UAAS,SAAAK,GAAS,MAAK,CAC1Bf,SAAS,CAAEa,GAAH,mBAAkBE,EAAUf,WACpCE,KAAM,GACNC,OAAQ,Q,EAIZa,cAAgB,SAAAC,GACd,EAAKP,UAAS,SAAAK,GAAS,MAAK,CAC1Bf,SAAUe,EAAUf,SAASC,QAAO,SAAAiB,GAAO,OAAIA,EAAQJ,KAAOG,U,4CAIlE,WAAU,IAAD,OACP,OACE,qCACE,2CACA,uBAAME,SAAUC,KAAKT,WAArB,UACE,yCAEE,uBACEU,KAAK,OACLnB,KAAK,OACLoB,SAAUF,KAAKd,aACfG,MAAOW,KAAKrB,MAAMG,KAClBqB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,OAGZ,2CAEE,uBACEJ,KAAK,MACLnB,KAAK,SACLoB,SAAUF,KAAKd,aACfG,MAAOW,KAAKrB,MAAMI,OAClBoB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAAb,4BAEF,oCACE,0CACA,0DAEE,uBACEA,KAAK,OACLnB,KAAK,SACLoB,SAAUF,KAAKd,aACfG,MAAOW,KAAKrB,MAAME,OAClBsB,QAAQ,yHACRC,MAAM,8IAGV,6BACGJ,KAAKrB,MAAMC,SACTC,QAAO,SAAAiB,GAAO,OACbA,EAAQhB,KACLwB,cACAC,SAAS,EAAK5B,MAAME,OAAOyB,kBAE/BE,KAAI,gBAAGd,EAAH,EAAGA,GAAIZ,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACH,+BACGD,EADH,IACUC,EACR,wBAAQkB,KAAK,SAASQ,QAAS,kBAAM,EAAKb,cAAcF,IAAxD,sBAFOA,kB,GAxFPgB,aAsGHhC,ICpGfiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ef1d86e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n    name: '',\n    number: '',\n  };\n\n  inputId = nanoid();\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitForm = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    this.setState(prevState => ({\n      contacts: [newContact, ...prevState.contacts],\n      name: '',\n      number: '',\n    }));\n  };\n\n  deleteContact = idBtn => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== idBtn),\n    }));\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <form onSubmit={this.submitForm}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              onChange={this.handleChange}\n              value={this.state.name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              onChange={this.handleChange}\n              value={this.state.number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n        <section>\n          <h2>Contacts</h2>\n          <label>\n            Find contacts by name\n            <input\n              type=\"text\"\n              name=\"filter\"\n              onChange={this.handleChange}\n              value={this.state.filter}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            />\n          </label>\n          <ul>\n            {this.state.contacts\n              .filter(contact =>\n                contact.name\n                  .toLowerCase()\n                  .includes(this.state.filter.toLowerCase())\n              )\n              .map(({ id, name, number }) => (\n                <li key={id}>\n                  {name}:{number}\n                  <button type=\"button\" onClick={() => this.deleteContact(id)}>\n                    Delete\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}